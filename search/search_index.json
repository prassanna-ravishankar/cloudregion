{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cloudregion Documentation","text":"<p>Welcome to cloudregion - a lightweight Python library for canonical cloud region mapping across AWS, Azure, and Google Cloud Platform.</p>"},{"location":"#overview","title":"Overview","text":"<p><code>cloudregion</code> solves the problem of inconsistent region naming across cloud providers by providing a simple, intuitive interface using city-based names.</p> <p>Instead of remembering that Virginia is called: - <code>us-east-1</code> in AWS - <code>eastus</code> in Azure - <code>us-east1</code> in GCP</p> <p>You can simply use <code>region('virginia')</code> and get the correct provider-specific name.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install cloudregion\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from cloudregion import region\n\n# Use intuitive city names\nr = region('virginia')\nprint(r.aws)    # us-east-1\nprint(r.azure)  # eastus\nprint(r.gcp)    # us-east1\n\n# Works with aliases too\nregion('us-east').canonical  # virginia\nregion('eu-west').gcp       # europe-west1\n</code></pre>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#city-based-naming","title":"City-Based Naming","text":"<p>The library uses intuitive city names as canonical identifiers: - <code>virginia</code> instead of <code>us-east-1</code>/<code>eastus</code>/<code>us-east1</code> - <code>tokyo</code> instead of <code>ap-northeast-1</code>/<code>japaneast</code>/<code>asia-northeast1</code> - <code>frankfurt</code> instead of <code>eu-central-1</code>/<code>germanywestcentral</code>/<code>europe-west3</code></p>"},{"location":"#provider-properties","title":"Provider Properties","text":"<p>Each region object exposes provider-specific names through properties: - <code>.aws</code> - Returns AWS region identifier - <code>.azure</code> - Returns Azure region identifier - <code>.gcp</code> - Returns Google Cloud Platform region identifier - <code>.canonical</code> - Returns the canonical city name</p>"},{"location":"#aliases","title":"Aliases","text":"<p>Common aliases are supported for convenience: - <code>us-east</code>, <code>us-west</code>, <code>eu-west</code>, <code>asia-southeast</code> - Regional variations like <code>n-virginia</code>, <code>germany</code>, <code>japan</code></p>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#multi-cloud-infrastructure","title":"Multi-Cloud Infrastructure","text":"<pre><code>from cloudregion import region\n\n# Deploy to the same logical region across clouds\ntarget_region = region('virginia')\n\n# AWS deployment\naws_config = {'region': target_region.aws}\n\n# Azure deployment\nazure_config = {'location': target_region.azure}\n\n# GCP deployment\ngcp_config = {'region': target_region.gcp}\n</code></pre>"},{"location":"#sdk-integration","title":"SDK Integration","text":"<pre><code>from cloudregion.integrations import boto3_client_kwargs\n\n# Simplified boto3 client creation\nec2_config = boto3_client_kwargs('ec2', 'virginia')\nec2 = boto3.client(**ec2_config)\n</code></pre>"},{"location":"#configuration-management","title":"Configuration Management","text":"<pre><code># Environment-specific region mapping\nregions = {\n    'dev': region('virginia'),\n    'staging': region('oregon'),\n    'prod': region('frankfurt')\n}\n\nenv = 'prod'\naws_region = regions[env].aws  # eu-central-1\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"<p>See the API Reference for detailed documentation of all classes and functions.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"modules/","title":"API Reference","text":""},{"location":"modules/#cloudregion_1","title":"cloudregion","text":""},{"location":"modules/#cloudregion","title":"<code>cloudregion</code>","text":"<p>cloudregion - Simple Python library for cloud region mapping.</p> <p>Converts between canonical city-based region names and provider-specific region identifiers across AWS, Azure, and Google Cloud Platform.</p> Basic usage <p>from cloudregion import region r = region('virginia') r.aws 'us-east-1' r.azure 'eastus' r.gcp 'us-east1'</p>"},{"location":"modules/#cloudregion.CloudRegionError","title":"<code>CloudRegionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for cloud region errors.</p>"},{"location":"modules/#cloudregion.Region","title":"<code>Region</code>","text":"<p>Represents a canonical cloud region with provider-specific mappings.</p> <p>A Region object provides access to provider-specific region identifiers through properties (.aws, .azure, .gcp) based on a canonical city name.</p> Example <p>r = Region('virginia') r.aws 'us-east-1' r.azure 'eastus' r.gcp 'us-east1'</p>"},{"location":"modules/#cloudregion.Region.aws","title":"<code>aws</code>  <code>property</code>","text":"<p>Return the AWS region identifier.</p>"},{"location":"modules/#cloudregion.Region.azure","title":"<code>azure</code>  <code>property</code>","text":"<p>Return the Azure region identifier.</p>"},{"location":"modules/#cloudregion.Region.canonical","title":"<code>canonical</code>  <code>property</code>","text":"<p>Return the canonical city-based region name.</p>"},{"location":"modules/#cloudregion.Region.gcp","title":"<code>gcp</code>  <code>property</code>","text":"<p>Return the Google Cloud Platform region identifier.</p>"},{"location":"modules/#cloudregion.Region.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Test equality with another Region object.</p>"},{"location":"modules/#cloudregion.Region.__hash__","title":"<code>__hash__()</code>","text":"<p>Return hash for use in sets and as dictionary keys.</p>"},{"location":"modules/#cloudregion.Region.__init__","title":"<code>__init__(canonical_name)</code>","text":"<p>Initialize a Region with a canonical city-based name.</p> <p>Parameters:</p> Name Type Description Default <code>canonical_name</code> <code>str</code> <p>City-based region name (e.g., 'virginia', 'tokyo')</p> required <p>Raises:</p> Type Description <code>UnknownRegionError</code> <p>If the canonical name is not recognized</p>"},{"location":"modules/#cloudregion.Region.__repr__","title":"<code>__repr__()</code>","text":"<p>Return detailed string representation of the region.</p>"},{"location":"modules/#cloudregion.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return string representation of the region.</p>"},{"location":"modules/#cloudregion.UnknownRegionError","title":"<code>UnknownRegionError</code>","text":"<p>               Bases: <code>CloudRegionError</code></p> <p>Raised when a region name is not recognized.</p>"},{"location":"modules/#cloudregion.UnknownRegionError.__init__","title":"<code>__init__(region_name, available_regions)</code>","text":"<p>Initialize the exception with the unknown region and available options.</p>"},{"location":"modules/#cloudregionregion","title":"cloudregion.region","text":""},{"location":"modules/#cloudregion.region","title":"<code>cloudregion.region</code>","text":"<p>Core Region class for cloud provider region mapping.</p>"},{"location":"modules/#cloudregion.region.CloudRegionError","title":"<code>CloudRegionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for cloud region errors.</p>"},{"location":"modules/#cloudregion.region.Region","title":"<code>Region</code>","text":"<p>Represents a canonical cloud region with provider-specific mappings.</p> <p>A Region object provides access to provider-specific region identifiers through properties (.aws, .azure, .gcp) based on a canonical city name.</p> Example <p>r = Region('virginia') r.aws 'us-east-1' r.azure 'eastus' r.gcp 'us-east1'</p>"},{"location":"modules/#cloudregion.region.Region.aws","title":"<code>aws</code>  <code>property</code>","text":"<p>Return the AWS region identifier.</p>"},{"location":"modules/#cloudregion.region.Region.azure","title":"<code>azure</code>  <code>property</code>","text":"<p>Return the Azure region identifier.</p>"},{"location":"modules/#cloudregion.region.Region.canonical","title":"<code>canonical</code>  <code>property</code>","text":"<p>Return the canonical city-based region name.</p>"},{"location":"modules/#cloudregion.region.Region.gcp","title":"<code>gcp</code>  <code>property</code>","text":"<p>Return the Google Cloud Platform region identifier.</p>"},{"location":"modules/#cloudregion.region.Region.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Test equality with another Region object.</p>"},{"location":"modules/#cloudregion.region.Region.__hash__","title":"<code>__hash__()</code>","text":"<p>Return hash for use in sets and as dictionary keys.</p>"},{"location":"modules/#cloudregion.region.Region.__init__","title":"<code>__init__(canonical_name)</code>","text":"<p>Initialize a Region with a canonical city-based name.</p> <p>Parameters:</p> Name Type Description Default <code>canonical_name</code> <code>str</code> <p>City-based region name (e.g., 'virginia', 'tokyo')</p> required <p>Raises:</p> Type Description <code>UnknownRegionError</code> <p>If the canonical name is not recognized</p>"},{"location":"modules/#cloudregion.region.Region.__repr__","title":"<code>__repr__()</code>","text":"<p>Return detailed string representation of the region.</p>"},{"location":"modules/#cloudregion.region.Region.__str__","title":"<code>__str__()</code>","text":"<p>Return string representation of the region.</p>"},{"location":"modules/#cloudregion.region.UnknownRegionError","title":"<code>UnknownRegionError</code>","text":"<p>               Bases: <code>CloudRegionError</code></p> <p>Raised when a region name is not recognized.</p>"},{"location":"modules/#cloudregion.region.UnknownRegionError.__init__","title":"<code>__init__(region_name, available_regions)</code>","text":"<p>Initialize the exception with the unknown region and available options.</p>"},{"location":"modules/#cloudregionintegrations","title":"cloudregion.integrations","text":""},{"location":"modules/#cloudregion.integrations","title":"<code>cloudregion.integrations</code>","text":"<p>SDK integration helpers for cloud region mapping.</p> <p>Provides wrapper functions for popular cloud SDKs that automatically resolve canonical region names to provider-specific identifiers.</p>"},{"location":"modules/#cloudregion.integrations.IntegrationError","title":"<code>IntegrationError</code>","text":"<p>               Bases: <code>CloudRegionError</code></p> <p>Base exception for SDK integration errors.</p>"},{"location":"modules/#cloudregion.integrations.IntegrationError.__init__","title":"<code>__init__(region_name, provider)</code>","text":"<p>Initialize the exception for a region not available in a provider.</p>"},{"location":"modules/#cloudregion.integrations.azure_credential_kwargs","title":"<code>azure_credential_kwargs(region, **kwargs)</code>","text":"<p>Generate Azure credential kwargs with resolved region.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>Canonical region name or Azure region</p> required <code>**kwargs</code> <code>Any</code> <p>Additional credential parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with resolved location parameter</p> Example <p>cred_kwargs = azure_credential_kwargs('virginia')</p>"},{"location":"modules/#cloudregion.integrations.azure_credential_kwargs--use-with-azure-sdk-clients","title":"Use with Azure SDK clients","text":""},{"location":"modules/#cloudregion.integrations.boto3_client_kwargs","title":"<code>boto3_client_kwargs(service, region, **kwargs)</code>","text":"<p>Generate boto3 client kwargs with resolved region.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>str</code> <p>AWS service name (e.g., 'ec2', 's3')</p> required <code>region</code> <code>str</code> <p>Canonical region name or AWS region</p> required <code>**kwargs</code> <code>Any</code> <p>Additional client parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary of client parameters with resolved region_name</p> Example <p>client_kwargs = boto3_client_kwargs('ec2', 'virginia') client = boto3.client(**client_kwargs)</p>"},{"location":"modules/#cloudregion.integrations.boto3_session_kwargs","title":"<code>boto3_session_kwargs(region, **kwargs)</code>","text":"<p>Generate boto3 Session kwargs with resolved region.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>Canonical region name or AWS region</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Session parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary of Session parameters with resolved region_name</p> Example <p>session_kwargs = boto3_session_kwargs('virginia', profile_name='dev') session = boto3.Session(**session_kwargs)</p>"},{"location":"modules/#cloudregion.integrations.gcp_client_kwargs","title":"<code>gcp_client_kwargs(region, **kwargs)</code>","text":"<p>Generate GCP client kwargs with resolved region.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>Canonical region name or GCP region</p> required <code>**kwargs</code> <code>Any</code> <p>Additional client parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with resolved region parameter</p> Example <p>client_kwargs = gcp_client_kwargs('virginia')</p>"},{"location":"modules/#cloudregion.integrations.gcp_client_kwargs--use-with-google-cloud-client-libraries","title":"Use with Google Cloud client libraries","text":""},{"location":"modules/#cloudregion.integrations.resolve_region_parameter","title":"<code>resolve_region_parameter(region_param, provider)</code>","text":"<p>Resolve a region parameter to provider-specific format.</p> <p>Parameters:</p> Name Type Description Default <code>region_param</code> <code>str</code> <p>Region name (canonical or provider-specific)</p> required <code>provider</code> <code>str</code> <p>Cloud provider ('aws', 'azure', 'gcp')</p> required <p>Returns:</p> Type Description <code>str</code> <p>Provider-specific region identifier</p> <p>Raises:</p> Type Description <code>IntegrationError</code> <p>If region cannot be resolved</p>"},{"location":"modules/#cloudregionregion_data","title":"cloudregion.region_data","text":""},{"location":"modules/#cloudregion.region_data","title":"<code>cloudregion.region_data</code>","text":"<p>Region mapping data for cloud providers.</p> <p>This module contains the core mapping data between canonical city-based region names and provider-specific region identifiers.</p>"}]}